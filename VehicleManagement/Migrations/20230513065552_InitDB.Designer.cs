// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleManagement.Entities;

namespace VehicleManagement.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20230513065552_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VehicleManagement.Entities.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AboutUs")
                        .HasColumnName("AboutUS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppVersion")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("HeaderImages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PrivacyPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterUrl")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("YoutubeUrl")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("VehicleManagement.Entities.PasswordReset", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Token");

                    b.HasIndex("Email")
                        .HasName("IX_PasswordReset");

                    b.ToTable("PasswordReset");
                });

            modelBuilder.Entity("VehicleManagement.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(128)")
                        .HasMaxLength(128);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("user_firebase_token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("IX_Email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasName("IX_Username");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 5, 13, 11, 55, 51, 650, DateTimeKind.Local).AddTicks(4368),
                            Email = "admin@abc.com",
                            FirstName = "Vehicle ",
                            IsAdmin = true,
                            IsEmployee = false,
                            LastName = "Master",
                            PasswordHash = new byte[] { 28, 45, 217, 79, 16, 3, 131, 13, 0, 47, 156, 46, 149, 251, 13, 53, 62, 43, 218, 123, 185, 163, 117, 200, 132, 226, 134, 27, 79, 85, 186, 6, 87, 73, 112, 218, 224, 74, 108, 39, 74, 202, 223, 139, 10, 42, 255, 69, 54, 205, 122, 51, 78, 142, 207, 140, 173, 53, 250, 227, 165, 154, 97, 148 },
                            PasswordSalt = new byte[] { 44, 30, 82, 182, 104, 215, 46, 121, 58, 71, 221, 54, 171, 205, 36, 147, 156, 105, 159, 232, 4, 201, 151, 243, 122, 121, 133, 65, 243, 155, 137, 158, 176, 110, 113, 13, 19, 56, 107, 139, 163, 219, 243, 231, 79, 2, 228, 97, 58, 21, 244, 95, 245, 111, 198, 246, 255, 136, 245, 157, 210, 76, 227, 236, 173, 50, 254, 222, 108, 62, 140, 146, 37, 74, 16, 56, 79, 112, 184, 137, 103, 4, 237, 152, 244, 222, 248, 103, 121, 134, 255, 133, 162, 200, 150, 193, 167, 151, 232, 171, 130, 46, 23, 93, 161, 209, 44, 123, 13, 123, 11, 166, 135, 85, 112, 146, 203, 44, 175, 210, 57, 11, 45, 48, 244, 46, 5, 49 },
                            Username = "admin@abc.com"
                        });
                });

            modelBuilder.Entity("VehicleManagement.Entities.UserInRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserInRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("VehicleManagement.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("VehicleManagement.Entities.VehicleManufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleManufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 2,
                            Name = "BMW Group"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Honda Motor Co."
                        },
                        new
                        {
                            Id = 4,
                            Name = "Suzuki Motor Corporation"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Nissan Motor Co."
                        });
                });

            modelBuilder.Entity("VehicleManagement.Entities.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ModelYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("VehicleModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ManufacturerId = 1,
                            ModelYear = "2000",
                            Name = "Toyota Corolla"
                        },
                        new
                        {
                            Id = 2,
                            ManufacturerId = 2,
                            ModelYear = "2000",
                            Name = "BMW 7 Series"
                        },
                        new
                        {
                            Id = 3,
                            ManufacturerId = 3,
                            ModelYear = "2000",
                            Name = "Honda City"
                        },
                        new
                        {
                            Id = 4,
                            ManufacturerId = 4,
                            ModelYear = "2000",
                            Name = "Suzuki Vitara"
                        },
                        new
                        {
                            Id = 5,
                            ManufacturerId = 5,
                            ModelYear = "2000",
                            Name = "Nissan Altima"
                        },
                        new
                        {
                            Id = 6,
                            ManufacturerId = 1,
                            ModelYear = "2000",
                            Name = "Toyota Hilux"
                        });
                });

            modelBuilder.Entity("VehicleManagement.Entities.UserInRole", b =>
                {
                    b.HasOne("VehicleManagement.Entities.UserRole", "userRole")
                        .WithMany("userRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRoles_UserInRoles")
                        .IsRequired();

                    b.HasOne("VehicleManagement.Entities.User", "user")
                        .WithMany("userRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_UserInRoles")
                        .IsRequired();
                });

            modelBuilder.Entity("VehicleManagement.Entities.VehicleModel", b =>
                {
                    b.HasOne("VehicleManagement.Entities.VehicleManufacturer", "Manufacturer")
                        .WithMany("_vehicleModels")
                        .HasForeignKey("ManufacturerId")
                        .HasConstraintName("FK_Manufacturer_vehicleModels")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
